import os

from django.utils.translation import ugettext_lazy as _
from settings import *

DEBUG = True

SITE_BRANDING = 'OSDC Console'

TEMPLATE_DEBUG = DEBUG

USE_X_FORWARDED_HOST = True

# Set SSL proxy settings:
# For Django 1.4+ pass this header from the proxy after terminating the SSL,
# and don't forget to strip it from the client's request.
# For more information see:
# https://docs.djangoproject.com/en/1.4/ref/settings/#secure-proxy-ssl-header
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')

# Specify a regular expression to validate user passwords.
# HORIZON_CONFIG = {
#     "password_validator": {
#         "regex": '.*',
#         "help_text": _("Your password does not meet the requirements.")
#     }
# }

LOCAL_PATH = os.path.dirname(os.path.abspath(__file__))
TUKEY_ROOT = os.path.abspath(os.path.join(ROOT_PATH, '..', 'tukey'))

#FORCE_SCRIPT_NAME = '/demo'

# ignore what openstack_dashboard/settings.py it is ignored and the 
# value is actually coming from the openstack_auth/urls.py
# so instead we are using this in addtion like:
# {% url logout %}{{ LOGOUT_URL }}
#LOGOUT_URL = '?next=/Shibboleth.sso/Logout%3Freturn%3Dhttp%3A%2F%2Fconsole.opensciencedatacloud.org' + FORCE_SCRIPT_NAME + LOGIN_URL + '%3Fshib%3Dtrue' 
LOGOUT_URL = '?next=/Shibboleth.sso/Logout%3Freturn%3Dhttp%3A%2F%2Fconsole.opensciencedatacloud.org' + LOGIN_URL + '%3Fshib%3Dtrue' 

TEMPLATE_CONTEXT_PROCESSORS += ( "tukey.context_processors.logout_url", )


DATABASES = {
    "default": {
        # Ends with "postgresql_psycopg2", "mysql", "sqlite3" or "oracle".
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        # DB name or path to database file if using sqlite3.
        "NAME": "osdcdb",
        # Not used with sqlite3.
        "USER": "osdc_user",
        # Not used with sqlite3.
        "PASSWORD": "0sdc-1812",
        # Set to empty string for localhost. Not used with sqlite3.
        "HOST": "",
        # Set to empty string for default. Not used with sqlite3.
        "PORT": "",
    },
    "files": {

            # Ends with "postgresql_psycopg2", "mysql", "sqlite3" or "oracle".
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        # DB name or path to database file if using sqlite3.
        "NAME": "permissions",
        # Not used with sqlite3.
        "USER": "cloudgui",
        # Not used with sqlite3.
        "PASSWORD": "",
        # Set to empty string for localhost. Not used with sqlite3.
        "HOST": "",
        # Set to empty string for default. Not used with sqlite3.
        "PORT": "",

#	"ENGINE": "django.db.backends.sqlite3",
#	#"NAME": "/home/ubuntu/web2py/applications/Permissions/databases/storage.sqlite",
#        "NAME": "/home/ubuntu/tukey/tukey-site/files/permissions.db",
#        "USER": "",
#        "PASSWORD": "",
#        "HOST": "",
#        "PORT": "",
    }

}

#DATABASE_ROUTERS = ['files.router.PermissionsRouter']


# Set custom secret key:
# You can either set it to a specific value or you can let horizion generate a
# default secret key that is unique on this machine, e.i. regardless of the
# amount of Python WSGI workers (if used behind Apache+mod_wsgi): However, there
# may be situations where you would want to set this explicitly, e.g. when
# multiple dashboard instances are distributed on different machines (usually
# behind a load-balancer). Either you have to make sure that a session gets all
# requests routed to the same dashboard instance or you set the same SECRET_KEY
# for all of them.
# from horizon.utils import secret_key
# SECRET_KEY = secret_key.generate_or_read_from_file(os.path.join(LOCAL_PATH, '.secret_key_store'))

# We recommend you use memcached for development; otherwise after every reload
# of the django development server, you will have to login again. To use
# memcached set CACHE_BACKED to something like 'memcached://127.0.0.1:11211/'
CACHE_BACKEND = 'locmem://'

# Send email to the console by default
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Or send them to /dev/null
#EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'

# Configure these for your outgoing email host
# EMAIL_HOST = 'smtp.my-company.com'
# EMAIL_PORT = 25
# EMAIL_HOST_USER = 'djangomail'
# EMAIL_HOST_PASSWORD = 'top-secret!'

# For multiple regions uncomment this configuration, and add (endpoint, title).
# AVAILABLE_REGIONS = [
#     ('http://cluster1.example.com:5000/v2.0', 'cluster1'),
#     ('http://cluster2.example.com:5000/v2.0', 'cluster2'),
# ]
OPENSTACK_HOST = "127.0.0.1"
#OPENSTACK_HOST = "10.103.114.3"
OPENSTACK_KEYSTONE_URL = "http://%s:5000/v2.0" % OPENSTACK_HOST
OPENSTACK_KEYSTONE_DEFAULT_ROLE = "Member"

# Disable SSL certificate checks (useful for self-signed certificates):
# OPENSTACK_SSL_NO_VERIFY = True

# The OPENSTACK_KEYSTONE_BACKEND settings can be used to identify the
# capabilities of the auth backend for Keystone.
# If Keystone has been configured to use LDAP as the auth backend then set
# can_edit_user to False and name to 'ldap'.
#
# TODO(tres): Remove these once Keystone has an API to identify auth backend.
OPENSTACK_KEYSTONE_BACKEND = {
    'name': 'native',
    'can_edit_user': True
}

# OPENSTACK_ENDPOINT_TYPE specifies the endpoint type to use for the endpoints
# in the Keystone service catalog. Use this setting when Horizon is running
# external to the OpenStack environment. The default is 'internalURL'.
#OPENSTACK_ENDPOINT_TYPE = "publicURL"

# The number of objects (Swift containers/objects or images) to display
# on a single page before providing a paging element (a "more" link)
# to paginate results.
API_RESULT_LIMIT = 1000
API_RESULT_PAGE_SIZE = 20

# The timezone of the server. This should correspond with the timezone
# of your entire OpenStack installation, and hopefully be in UTC.
TIME_ZONE = "UTC"

LOGGING = {
        'version': 1,
        # When set to True this will disable all logging except
        # for loggers specified in this configuration dictionary. Note that
        # if nothing is specified here and disable_existing_loggers is True,
        # django.db.backends will still log unless it is disabled explicitly.
        'disable_existing_loggers': False,
        'handlers': {
            'null': {
                'level': 'DEBUG',
                'class': 'django.utils.log.NullHandler',
                },
            'console': {
                # Set the level to "DEBUG" for verbose output logging.
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                },
            },
        'loggers': {
            # Logging from django.db.backends is VERY verbose, send to null
            # by default.
            'django.db.backends': {
                'handlers': ['null'],
                'propagate': False,
                },
            'horizon': {
                'handlers': ['console'],
                'propagate': False,
            },
            'openstack_dashboard': {
                'handlers': ['console'],
                'propagate': False,
            },
            'novaclient': {
                'handlers': ['console'],
                'propagate': False,
            },
            'keystoneclient': {
                'handlers': ['console'],
                'propagate': False,
            },
            'glanceclient': {
                'handlers': ['console'],
                'propagate': False,
            },
            'nose.plugins.manager': {
                'handlers': ['console'],
                'propagate': False,
            }
        }
}


# For times when a user needs to choose a resource to perform a
# certain action on we need to know what resources support that
# function those functions are currently:
CLOUD_FUNCTIONS = {
    'import_keypair': ['sullivan', 'loginadler', 'loginsullivan'],
    'create_keypair': ['adler', 'sullivan', 'loginadler', 'loginsullivan'],
    'associate_ip': ['sullivan'],
    'edit_instance': ['sullivan'],
    'launch_multiple': ['sullivan'],
    'namable_servers': ['sullivan']
}

# Cloud ids that will match the tukey-middleware etc/enabled config
# files as keys and the values a short description
CLOUD_DETAILS = {
    'loginadler': 'Adler login server',
    'loginsullivan': 'Sullivan login server',
    'adler':	'Adler instances',
    'sullivan':	'Sullivan instances'
#     'sc12':	'SC12 Demo Cloud'
}

AUTH_MEMCACHED = '127.0.0.1:11211'

# Shibboleth headers we want to consume in the order we want to
# check for them
SHIB_HEADERS = ('HTTP_EPPN',)

USAGE_ATTRIBUTES = {
    'OCC-Y Hadoop Disk (GB):': "occ_y_hdfsdu",
    'OCC-Y Jobs:': "occ_y_jobs",
    'Adler Glusterfs Disk (GB):': "adler_du",
    'Sullivan Glusterfs Disk (GB):': "sullivan_du",
    'Sullivan Cloud Virtual Cores:': "sullivan_cores",
    'Sullivan Cloud RAM Hours (GB Hours):': "sullivan_ram",
    'Adler Cloud RAM Hours (GB Hours):': "adler_ram",
    'Adler Cloud Virtual Cores:': "adler_cores",
    'OCC LVOC Hadoop Disk (GB):': "occ_lvoc_hdfsdu",
    'OCC LVOC Jobs:': "occ_lvoc_jobs"}


INSTALLED_APPS = (
    'openstack_dashboard',
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'compressor',
    'horizon',
    'horizon.dashboards.nova',
    'horizon.dashboards.syspanel',
    'horizon.dashboards.settings',
    'django_openid_auth',
    'openstack_auth',
    'tukey.files',
    'tukey.tukey_admin',
    'tukey.status',
    'tukey.webforms',
    'tukey.datasets',
    'tukey.customtags',
    'tukey.keyservice',
    'tukey.content'
#    'horizon_billing',
)

AUTHENTICATION_BACKENDS = (
     'django_openid_auth.auth.OpenIDBackend',
     'openstack_auth.backend.KeystoneBackend',
)

OPENID_CREATE_USERS = True

APPLICATION_EMAIL = 'aheath@uchicago.edu'
APPLICATION_INVITE_EMAIL = 'aheath@uchicago.edu'
SUPPORT_EMAIL = 'aheath@uchicago.edu'

TEMPLATE_DIRS += ( os.path.abspath(os.path.join(TUKEY_ROOT, 'templates')), )
