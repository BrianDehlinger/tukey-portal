#!/bin/bash

# Install tukey portal!
# TODO: Write this in python and make it portable

LOCAL_SETTINGS_FILE=/home/ubuntu/site_local_settings.py

# Use the last stable Horizon commit
STABLE=true
#STABLE=false

MULTI_SITE=false
PATH=demo

CONFIGURE_APACHE=true
CREATE_CONSOLE=true

# Last commit of Horizon tested against
HORIZON_COMMIT=3a9b0da489030eaacc6cc0416f92192b74783ac8


# Site specific installation variables

# Where to install MUST be absolute path for linking
BASE_DIR=/var/www/tukey
HORIZON_DIR=tukey-portal
RUN_USER=ubuntu
RUN_GROUP=ubuntu

# Probably wont change
TUKEY_DIR=tukey

source local_settings.sh

git clone https://github.com/openstack/horizon.git $BASE_DIR/$HORIZON_DIR

if $STABLE
then
    cd $BASE_DIR/$HORIZON_DIR
    echo "Using current stable Horizon commit: $HORIZON_COMMIT"
    git checkout $HORIZON_COMMIT
    cd -
else
    echo "WARNING! Using unstable latest version of Horizon"
fi

# Copy tukey subdir into Horizon 
cp -r $TUKEY_DIR $BASE_DIR/$HORIZON_DIR



# I no longer think this is the best way to do this
# instead we will have the entire local settings file in a directory
# that is site specific probably under /usr/local/etc/tukey
# so lets just link our file from there...

ln -s $LOCAL_SETTINGS_FILE $BASE_DIR/$HORIZON_DIR/openstack_dashboard/local/local_settings.py

#cp local_settings.stub $BASE_DIR/$HORIZON_DIR/openstack_dashboard/local/local_settings.py
#
#
#echo "TIME_ZONE = $TIME_ZONE
#
#LOGOUT_URL = $LOGOUT_URL
#
#SITE_BRANDING = $SITE_BRANDING
#
#DATABASES = {
#    'default': {
#        # Ends with 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        # DB name or path to database file if using sqlite3.
#        'NAME': $DB_NAME,
#        # Not used with sqlite3.
#        'USER': $DB_USER,
#        # Not used with sqlite3.
#        'PASSWORD': $DB_PASSWORD,
#        # Set to empty string for localhost. Not used with sqlite3.
#        'HOST': '',
#        # Set to empty string for default. Not used with sqlite3.
#        'PORT': '',
#    }
#}
#
## For times when a user needs to choose a resource to perform a
## certain action on we need to know what resources support that
## function those functions are currently:
#CLOUD_FUNCTIONS = {
#    'import_keypair': ['sullivan', 'loginadler', 'loginsullivan', 'all'],
#    'create_keypair': ['adler', 'sullivan', 'loginadler', 'loginsullivan', 'all'],
#    'associate_ip': ['sullivan'],
#    'edit_instance': ['sullivan'],
#    'launch_multiple': ['sullivan'],
#    'namable_servers': ['sullivan']
#}
#
## Cloud ids that will match the tukey-middleware etc/enabled config
## files as keys and the values a short description
#CLOUD_DETAILS = {
#    'loginadler': 'Adler login server',
#    'loginsullivan': 'Sullivan login server',
#    'adler':    'Adler instances',
#    'sullivan': 'Sullivan instances',
#    'all': 'All Resources'
#}
#
#AUTH_MEMCACHED = '127.0.0.1:11211'
#
## Shibboleth headers we want to consume in the order we want to
## check for them
#SHIB_HEADERS = ('HTTP_EPPN',)
#
#USAGE_ATTRIBUTES = {
#    'OCC-Y Hadoop Disk (GB):': 'occ_y_hdfsdu',
#    'OCC-Y Jobs:': 'occ_y_jobs',
#    'Adler Glusterfs Disk (GB):': 'adler_du',
#    'Sullivan Glusterfs Disk (GB):': 'sullivan_du',
#    'Sullivan Cloud Virtual Cores:': 'sullivan_cores',
#    'Sullivan Cloud RAM Hours (GB Hours):': 'sullivan_ram',
#    'Adler Cloud RAM Hours (GB Hours):': 'adler_ram',
#    'Adler Cloud Virtual Cores:': 'adler_cores',
#    'OCC LVOC Hadoop Disk (GB):': 'occ_lvoc_hdfsdu',
#    'OCC LVOC Jobs:': 'occ_lvoc_jobs'}
#
#
#
#APPLICATION_EMAIL = 'accounts@opencloudconsortium.org'
#APPLICATION_INVITE_EMAIL = 'accounts@opencloudconsortium.org'
#SUPPORT_EMAIL = 'support@opensciencedatacloud.org'
#
#SESSION_TIMEOUT = 3000
#" >> $BASE_DIR/$HORIZON_DIR/openstack_dashboard/local/local_settings.py
#


cd $BASE_DIR/$HORIZON_DIR

# Apply patches for the stuff we couldn't monkey-patch
patch -p1 < $TUKEY_DIR/patches/horizon.patch
patch -p1 < $TUKEY_DIR/patches/openstack_dashboard.patch

# Append to 

echo "# Tukey Requirements automatically generated by install.sh 
python-openid
django-openid-auth
psycopg2
python-memcached
" >> tools/pip-requires

python tools/install_venv.py

if $CONFIGURE_APACHE
then
    # Generate Apache config file openstack-dashboard.conf
    
    echo "# Automatically generated by install.sh
    WSGIScriptAlias / $BASE_DIR/$HORIZON_DIR/openstack_dashboard/wsgi/django.wsgi
    
    WSGIDaemonProcess tukey-portal user=$RUN_USER group=$RUN_GROUP python-path=$BASE_DIR/$HORIZON_DIR:$BASE_DIR/$HORIZON_DIR/.venv/lib/python2.7/site-packages
    
    WSGIProcessGroup tukey-portal
    
    Alias /static $BASE_DIR/$HORIZON_DIR/$TUKEY_DIR/static/
    
    <Directory $BASE_DIR/$HORIZON_DIR/openstack_dashboard/wsgi>
      Order allow,deny
      Allow from all
    </Directory>
    
    <Directory $BASE_DIR/$HORIZON_DIR/$TUKEY_DIR/static>
      Order allow,deny
      Allow from all
    </Directory>" > $TUKEY_DIR/openstack-dashboard.conf 
    
    sudo ln -s $BASE_DIR/$HORIZON_DIR/$TUKEY_DIR/openstack-dashboard.conf /etc/apache2/sites-available/
    

    if $CREATE_CONSOLE
    then    
    
        echo "# Automatically generated by install.sh
        NameVirtualHost *:80
        
        
        <Virtualhost *:80>
            ServerName console.opensciencedatacloud.org
        
            ErrorLog /var/log/apache2/console-error.log
            CustomLog /var/log/apache2/console-access.log common
        
            UseCanonicalName On
        
            include /etc/apache2/sites-available/openstack-dashboard.conf
        
        </virtualhost>" > /etc/apache2/sites-available/console.conf

        sudo a2ensite console

    fi

fi

